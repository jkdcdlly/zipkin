buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.4'
    id 'net.researchgate.release' version '2.2.1'
    id 'com.github.hierynomus.license' version '0.12.1'
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: "com.jfrog.artifactory-upload"
    apply from: "$rootDir/gradle/dependencies.gradle"  // common dependency versions
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

import org.gradle.util.VersionNumber
ext.isSnapshot = VersionNumber.parse(rootProject.version).qualifier == "SNAPSHOT"

// Workarounds for idea goal failing
allprojects {
    // Cannot infer Scala class path because..
    // - no repository is declared in root project
    repositories { jcenter() }

    // - no Scala library Jar was found
    dependencies {
        compile "org.scala-lang:scala-library:${scalaVersion}"
    }
}

// Source and JavaDoc jars for Maven Central
allprojects {
    task sourceJar(type: Jar) {
        description "An archive of the source code for Maven Central"
        classifier "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        description "An archive of the JavaDocs for Maven Central"
        classifier "javadoc"
        from javadoc
    }
}

// Custom configuration used to explicitly control the artifacts we want to publish
allprojects {
    configurations {
        zipkinUpload
    }

    // These we want for each subproject
    artifacts {
        zipkinUpload jar, javadocJar, sourceJar
    }
}

// Step 1 in the release process: `gradle release` creates new commits based on a tag
// to trigger new builds which will upload artifacts. See RELEASE.md for more.
release {
    failOnCommitNeeded = false
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = failOnSnapshotDependencies
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = '[RELEASE] - '
    preTagCommitMessage = 'publish version: '
    newVersionCommitMessage = 'new version: '

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToCurrentBranch = true
    }
}

// Workaround 1 for `gradle release`
task createReleaseTag(overwrite: true, group: 'Release') {
    // Zipkin is released by pushing tags manually, so
    // we need the release plugin to NOT create tags when it runs.
}

// Workaround 2 for `gradle release`
task runBuildTasks(overwrite: true, group: 'Release') {
    // During the release process, building and testing in the Travis job running `gradle release`
    // is redundant. We can save time by running the build and tests only on commits to master.
}

// Step 2 in the release process: upload all builds to OJO
artifactory {
    contextUrl = "http://oss.jfrog.org/artifactory"

    publish {
        repository {
            if (project.isSnapshot) {
                repoKey = 'oss-snapshot-local'
            } else {
                repoKey = 'oss-release-local'
            }
            username = System.getenv('BINTRAY_USER')
            password = System.getenv('BINTRAY_KEY')
            maven = true
        }

        defaults {
            publishConfigs 'zipkinUpload'
        }
    }
}

// Workaround for OJO: we don't want to publish anything from the root project.
allprojects { thisProject ->
    if (thisProject == rootProject) {
        artifactoryPublish.publishConfigs()
    }
}

// Step 3 in the release process: Publish non-SNAPSHOT releases to Bintray
allprojects { thisProject ->
    bintray {
        // Read variables from travis encrypted config or local
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')

        // Workaround: we don't want to publish anything from the root project.
        // https://github.com/bintray/gradle-bintray-plugin/issues/74
        if (thisProject == rootProject) {
            configurations = []
        } else {
            configurations = ['zipkinUpload']
        }

        dryRun = System.getenv('BINTRAY_DRYRUN') != null
        publish = true

        pkg {
            licenses = ['Apache-2.0']
            repo = System.getenv('BINTRAY_ZIPKIN_REPO') ?: "maven"
            vcsUrl = project.repo
            name = System.getenv('BINTRAY_ZIPKIN_PACKAGE') ?: "zipkin"
            userOrg = System.getenv('BINTRAY_ZIPKIN_ORG') ?: "openzipkin"
            version {
                name = project.version
                desc = "Zipkin version ${project.version}"
                released = new Date()
                vcsTag = project.version

                gpg {
                    sign = true
                }

                mavenCentralSync {
                    user = System.getenv('SONATYPE_TOKEN')
                    password = System.getenv('SONATYPE_PASSWORD')
                }
            }
        }
    }
}

// Wiring to call the appropriate upload tasks
task zipkinUpload(group: 'release') {
    description "Upload to oss.jfrog.org if this is a SNAPSHOT release. Upload to both Bintray and oss.jfrog.org otherwise."
    dependsOn artifactoryPublish
    if (!project.isSnapshot) {
        dependsOn bintrayUpload
    }
}

// Step 4 of the release process is syncing to Maven Central. That requires some metadata to be present
// in the .pom files. This section takes care of that.
allprojects { thisProject ->
    install {
        repositories.mavenInstaller {
            pom {
                project {
                    name 'Zipkin'
                    description project.description
                    url project.repo

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'zipkin-dev'
                            email 'zipkin-dev@googlegroups.com'
                        }
                    }

                    scm {
                        connection project.repo + '.git'
                        developerConnection 'git@github.com:openzipkin/zipkin.git'
                        url project.repo
                    }
                }
            }
        }
    }

}

// Build settings shared by all subprojects
subprojects { subproject ->
    apply from: "$rootDir/gradle/scalatest.gradle"

    compileTestScala.scalaCompileOptions.additionalParameters = ["-feature"]
    compileScala.scalaCompileOptions.additionalParameters = ["-feature"]

    test.maxParallelForks Runtime.runtime.availableProcessors()

    repositories {
        maven { url 'http://192.168.7.111/content/repositories/releases/' }
        maven { url 'http://192.168.7.181:8081/nexus/content/groups/public/' }
        maven { url 'http://repo.typesafe.com/typesafe/releases/' }
        maven { url 'https://maven.twttr.com/' }
    }

    dependencies {
        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-all:1.10.19'
        testCompile "org.scalatest:scalatest_${scalaInterfaceVersion}:2.2.5"
        testRuntime "org.slf4j:slf4j-simple:${commonVersions.slf4j}"
    }
}

// Quick hack to visualize inter-project dependencies
task dependencyReport {
    description "Write the dependency graph of the zipkin-* projects in this repository into project-dependencies.dot for use with GraphViz."
    doLast {
        def file = new File("project-dependencies.dot")
        file.delete()
        file << "digraph {\n"
        file << "splines=ortho\n"
        rootProject.childProjects.each { item ->
            def from = item.value
            from.configurations.compile.dependencies
                    .matching { it in ProjectDependency }
                    .each { to -> file << ("\"${from.name}\" -> \"${to.name}\"\n")}
        }
        file << "}\n"
    }
}

apply from: "${rootDir}/gradle/verify-licenses.gradle"
